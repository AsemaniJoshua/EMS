document.addEventListener("DOMContentLoaded", (function () { let Toast; "undefined" != typeof Swal && (Toast = Swal.mixin({ toast: !0, position: "top-end", showConfirmButton: !1, timer: 3e3, timerProgressBar: !0, didOpen: toast => { toast.addEventListener("mouseenter", Swal.stopTimer), toast.addEventListener("mouseleave", Swal.resumeTimer) } })); const loginForm = document.getElementById("teacherLoginForm"); loginForm && loginForm.addEventListener("submit", (function (event) { event.preventDefault() })), window.closeModal = function (id) { document.getElementById(id).classList.add("hidden") }; const loginForm1 = document.getElementById("teacher-login-form"); loginForm1 && loginForm1.addEventListener("submit", (function (event) { event.preventDefault(); const originalText = submitButton.innerHTML; submitButton.innerHTML = '<i class="fa-solid fa-spinner fa-spin"></i> Signing In...', submitButton.disabled = !0; const loginData = { email: document.getElementById("username-email").value.trim(), password: document.getElementById("password").value, remember: document.getElementById("remember-me").checked }; fetch("/api/login/processTeacherLogin.php", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(loginData) }).then((response => response.json())).then((data => { "success" === data.status ? (Toast && Toast.fire({ icon: "success", title: data.message || "Login successful!" }), setTimeout((() => { window.location.href = data.redirect || "/teacher/" }), 1e3)) : (Toast && Toast.fire({ icon: "error", title: data.message || "Login failed. Please try again." }), submitButton.innerHTML = originalText, submitButton.disabled = !1) })).catch((error => { console.error("Login error:", error), Toast && Toast.fire({ icon: "error", title: "Network error. Please check your connection and try again." }), submitButton.innerHTML = originalText, submitButton.disabled = !1 })) })); const loginForm2 = document.getElementById("teacherLoginForm"); loginForm2 && loginForm2.addEventListener("submit", (async function (e) { e.preventDefault(); const submitBtn = this.querySelector('button[type="submit"]'), originalBtnText = submitBtn.innerHTML; submitBtn.disabled = !0, submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Signing in...'; const email = document.getElementById("email").value, password = document.getElementById("password").value, remember = document.getElementById("remember").checked; try { const response = await fetch("/api/login/teacher/processTeacherLogin.php", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ email: email, password: password, remember: remember }) }), data = await response.json(); "success" === data.status ? (Toast.fire({ icon: "success", title: data.message || "Login successful!" }), setTimeout((() => { window.location.href = data.redirect || "/teacher/dashboard/" }), 1e3)) : (Toast.fire({ icon: "error", title: data.message || "Login failed. Please try again." }), submitBtn.disabled = !1, submitBtn.innerHTML = originalBtnText) } catch (err) { Toast.fire({ icon: "error", title: "An error occurred. Please try again." }), submitBtn.disabled = !1, submitBtn.innerHTML = originalBtnText } })); const forgotBtn = document.getElementById("forgotBtn"); forgotBtn?.addEventListener("click", (() => openModal("forgotModal"))), document.getElementById("forgotForm")?.addEventListener("submit", (async function (e) { e.preventDefault(); const contact = document.getElementById("contactInput").value.trim(); if (!contact) return Swal.fire({ icon: "error", title: "Required", text: "Please enter email or phone number." }); window._resetContact = contact; try { await fetch("/api/forgotPassword/teacher/requestReset.php", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ contact: contact }) }), openModal("otpModal") } catch (err) { Swal.fire({ icon: "error", title: "Error", text: "Failed to send OTP." }) } })), document.getElementById("otpForm")?.addEventListener("submit", (async function (e) { e.preventDefault(); const contact = window._resetContact, otpInputs = document.querySelectorAll(".otp-input"), otp = Array.from(otpInputs).map((input => input.value)).join(""); if (6 !== otp.length) return Swal.fire({ icon: "error", title: "Invalid OTP", text: "Please enter the 6-digit code." }); try { await fetch("/api/forgotPassword/teacher/verifyOtp.php", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ contact: contact, otp: otp }) }), closeModal("otpModal"), openModal("resetModal") } catch (err) { Swal.fire({ icon: "error", title: "OTP Error", text: "Failed to verify OTP." }) } })), document.getElementById("resetForm")?.addEventListener("submit", (async function (e) { e.preventDefault(); const password = document.getElementById("new_password").value, confirmPassword = document.getElementById("confirmPassword").value, contact = window._resetContact; if (password !== confirmPassword) return Swal.fire({ icon: "error", title: "Mismatch", text: "Passwords do not match." }); try { await fetch("/api/forgotPassword/teacher/resetPassword.php", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ contact: contact, password: password }) }), closeModal("resetModal"), Swal.fire({ icon: "success", title: "Password Reset", text: "Your password has been successfully reset!", confirmButtonColor: "#10b981" }) } catch (err) { Swal.fire({ icon: "error", title: "Reset Error", text: "Could not reset password." }) } })), document.querySelectorAll(".otp-input").forEach(((input, index, inputs) => { input.addEventListener("input", (() => { 1 === input.value.length && index < inputs.length - 1 && inputs[index + 1].focus() })), input.addEventListener("keydown", (e => { "Backspace" === e.key && "" === input.value && index > 0 && inputs[index - 1].focus() })) })), document.querySelectorAll("input").forEach((input => { input.addEventListener("blur", (function () { this.value ? (this.classList.remove("border-red-500"), this.classList.add("border-gray-300")) : (this.classList.remove("border-gray-300"), this.classList.add("border-red-500")) })) })) }));